遍历未知深度的复杂的dictionary

关键词
python、dictionary、recursion、yield

参考
https://stackoverflow.com/questions/12507206/how-to-completely-traverse-a-complex-dictionary-of-unknown-depth/12507453#12507453

积累
dictionary
python的数据结构的名字
content:key & value

C语言中的结构体
struct Books
{
   char  title[50];
   char  author[50];
   char  subject[100];
   int   book_id;
} book;
content:everything

JSON
JavaScript Object Notation
content:Obj & array

Mongodb-Document
BSON:二进制的JSON，基于JSON的扩展


学习
recursion
递归，自己调用自己
在一个dictionary中包含了dictionary又包含了list，list里又包含了dictionary。
碰见这样的dictionary如何遍历
现在看来，那样的数据结构的定义本身就具有递归性，用递归去遍历就再合适不过了。
def walk(data):
    if data is dict:
        for key, value in data.items():
            walk(value)
    elif data is list:
        for d in data:
            walk(d)
    else:
        print(leaf)
上面的代码会输出这个嵌套的list或者dict的每一个叶子的value

yield
参考：《FluentPython》.14章 可迭代的对象、迭代器和生成器
似曾相识，之前读过

可迭代对象
序列式可以迭代的是因为内部的iter函数
检查Sentence对象是否实现了__iter__方法，如果实现了就去调用它，获取一个迭代器
如果没有实现__iter__方法，但是实现了__getitem__方法，python会创建一个迭代器
如果尝试失败，python抛出typeerror异常

迭代器
python从可迭代对象中获取迭代器
序列是可迭代对象
iter函数用来构建一个迭代器
在实现上，迭代对象和迭代器的区别，迭代对象没有next()函数

生成器函数
生成器函数是为了得到一个迭代器，非典型的实现方式
这是python的处理方式

生成器表达式
语法糖，用()来搞yield的所带来的功能

标准库中的生成器函数
itertools模块，关于iter的一些常用库
这一块可以做成一个reference
避免重复代码
<fluent python> 14.9

yield from 与协程

可迭代的归约函数
all()
any()
这一块可以做成一个reference

深入分析iter函数
能传入一个参数，当作哨兵，碰见他就StopIteration


案例分析：在数据库转换工具中使用生成器
灵活性强
根据不同输入采用不同处理使得结果一直
我感觉最大的作用是流式


把生成器当成协程
什么是协程？咱也不知道

