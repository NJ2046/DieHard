20200713
1. maven中的parent标签

由上面这个标签，引出了两个存在于maven中的概念：聚合、继承
由自身经验来谈，继承相较与聚合是容易直接在闹钟有直观的映像
多数入门的面向对象编程的语言都会有说明继承：子类共享父类的方法和变量
聚合能想起来的是关于SQL中的聚合函数，最简单的理解就是分组统计，我想maven里的
聚合跟我能想到的SQL里的聚合应该是两码子事情

以下来自互联网的民间解释
继承：继承可以使得子POM可以获得 parent 中的各项配置，可以对子pom进行统一的配置和依赖管理
聚合：具有模块的项目被称为多模块或聚合项目。模块是此POM列出并作为一组执行的项目。通过一个pom打包的项目可以将它们列为模块来聚合成一组项目进行构建，这些模块名是这些项目的相对目录。
关系：不必为了聚合而继承同一个父POM，也不比为了继承父POM而设计成多模块

理解上面的解释
继承：与过往自己对继承的认识大致相似，变化了环境，比如，在Java里继承的是变量或者方法，在maven里继承的各个标签。
聚合：与SQL中的聚合函数区别很大，但分组却与聚合有点相似。maven里的聚合是一个动作，结合之前自己使用聚合的maven项目的经验来谈，
聚合就是把需要执行两边的mvn verify，变成在聚合层执行一边，凡是往没有了它来思考，就可以获得它存在的意义。上面的解释是准确的，但是不容易被我理解。

2. maven中的dependencyManagement
简单理解就是管理maven中包的版本号，这个通常在父pom中

pom导论：https://maven.apache.org/pom.html

过程记录：由于看不明白maven中的parent标签，百度了之后，发现了maven中继承和聚合的事情，我觉得算是知识点
后来又去看了dependencyManagement这个标签，没有概念性的东西，感觉像是功能性的标签，发现是可以统一管理版本号
后来又发现了那个parent本身的含义是，spring-boot项目依据maven特性而定制的pom配置，这一点还挺有趣


20200714
java.util.concurrent
java keyword synchronized
并发->同步->操作系统->进程->线程
我想还是先把基础概念搞得清晰点，不然最后也只是闷头驴
那就先来说说并发吧。
很早之前是的系统架构是这样的，一个时间段内，cpu负责处理一个程序。
cpu管理的东西有很多，比如内存、硬盘、等等。
假如一个程序有一个步骤是这样的，需要往硬盘里写个100G的数据
如果cpu只负责处理那一个程序，那cpu就得等着硬盘写完了100g的数据之后，再运行那个程序后面的事情。
所以有聪明的人就在想，cpu呀，内存呀，以及其它资源，这个时候是空闲的，着不就是一种浪费了
因此，我想并发这次就是这么出现的吧。
CPU的核心数和进程没什么直接联系，CPU的核心数越高代表能处理的数据量越大
操作系统：https://www.cnblogs.com/inception6-lxc/p/9073983.html

20200715
Lombok
大致看了一点，通过注解@，来简化一些代码的书写。
虽然没使用过，这个取巧感觉有点蹩脚。
某种程度上讲，看见这样的东西让我想起来python的魔法函数。


20200716
util.function.Consumer
java.lang.Runnable
java keyword synchronized
java.util.concurrent

Metrics
synchronized

Controller
util.function.Consumer
java.lang.Runnable

M和C是怎么通过Consumer和Runnable去关联后面的那些个请求SS、转模型等操作？

20200720
名词解释

util.function.Consumer
表示“接受一个参数输入且没有任何返回值的操作“。不同于其它的函数式接口，Consumer期望通过方法的实现来执行具体的操作
这东西的溯源是：接口

思考溯源:Consumer->函数式接口->接口->方法->类->抽象类
java的本质是：抽象类、接口、多态一堆吧

名词解释
Consumer:消费者
java函数式接口中的一员
函数式接口：有且仅有一个抽象方法的接口

Consumer源码

可实现方法，接受一个参数且没有返回值
void accept(T t);


默认方法，提供链式调用方式执行。
执行流程:先执行本身的accept在执行传入参数after.accept方法。
该方法会抛出NullPointerException异常。
如果在执行调用链时出现异常，会将异常传递给调用链功能的调用者，且发生异常后的after将不会在调用。
default Consumer<T> andThen(Consumer<? super T> after) {
    Objects.requireNonNull(after);
    return (T t) -> { accept(t); after.accept(t); };
}


也没看多久，算是看完了。
依稀感觉这玩意在脑海里有两个特点，就是先定义函数，后面再去执行，像是在转圈。
第二的感觉其实就像语法糖

上面是在不甚了解接口概念的条件下的体会，总之Java的设计思想，现在还未体会到秒的点。
接下来是java并发的事情。

java.util.function
Consumer 消费接口
Function 功能接口
Operator 操作接口
Predicate 断言接口
Supplier 生产接口
ref:https://www.jianshu.com/p/2338cabc59e1



20200724
java-concurrent

历史：java并发API演变
1.0-1.4 中的 java.lang.Thread
5.0 中的 java.util.concurrent
6.0 中的 Phasers 等
7.0 中的 Fork/Join 框架
8.0 中的 Lambda
至今 AQS

发现java.util.stream这个库也是有点厉害，所以以此看看并发的事情
例子举得比较简单，不知道那些复杂的任务，改如何去应用
是写一个函数，然后就开始全局去这样走
这跟我想象中的并发编程是有些差别的
只是用某一种策略


java.lang.Runnable

synchronized
java.util.concurrent.Executors
java.util.concurrent.Executors.newFixedThreadPool


20200803

熟悉一番assemble的代码

synchronized的作用:能够保证同一时刻最多只有一个线程执行该段代码，以达到并发安全的效果

synchronized类别：对象锁和类锁

对象锁：方法锁和同步代码块锁
假如有两个同步代码块锁【TS】，也有两个方法方法锁【MS】，有两个线程。
当线程执行TS的时候，在同一时刻，H1可以执行TS1，H2可以执行TS2。
当线程执行MS的时候，在同一时刻，H1可以执行MS1。
形象理解，TS锁的粒度比MS的要细。

类锁：static方法锁和class锁

总结
对于同步不同步，关键点在于锁，两个线程执行的是同一把锁，那么就依次排队等候，两个线程执行的不是同一把锁，那就各干各的事

synchronized:可重入性质和不可中断性质


自我总结

同步的含义是指在不同的线程中，让内存中变量进行同步，初步的理解。
实现同步的方式是将这变量锁主，也就是独占式。同一时刻只能由一个线程可以访问。

为什么要同步？
比如一段程序，A、B两个线程分别完成，B依赖与A。这种互相等待发信号的方法叫做同步。
如果不同步有没有其它替代方法，如果用多个线程的话，那就得同步。
不同步的话，会出现一些不想发生的状态。也就是锁存在的必要性。



java.util.concurrent.LinkedBlockingQueue
java.util.concurrent.SynchronousQueue
volatile


AQS
是一个用来构建锁和同步器的框架，使用AQS能简单且高效的构造出应用广泛的大量的同步器
ReentrantLock,Semaphore,ReentrantReadWriteLock,SynchronousQueue,FutureTask等都是基于AQS的。


todo
系统的认知一下java的并发




采用起承转合，需要熟知，抓住点。
crf-assemble两点
其一是neo4j的优化（虽然很low，但也算优化），
其二是并发的自动调节线程数目（这个需要熟悉并发那块的代码，依赖与看完java的并发，并理解）。

ner的点？
忽然想起来，单独起jieba分词，会让变得快。



assemble/patient代码分析
1. 创建进程池
2. 获取病人编号列表
3. 创建日志信息
4. 创建阻塞队列1（BlockingQueue）
5. 入Neo4j执行完成后将病人编号放入阻塞队列1
6. 创建阻塞队列2（SynchronousQueue）
7. 入Neo4j执行完成将组装操作放入阻塞队列2
8. 判断阻塞队列2是否为空，如果不为空，取出组装操作，进行组装
9. 判断阻塞队列1是否为空，如果不空，将病人编号取出，删除Neo4j数据，保持Neo4j库数据量较少



