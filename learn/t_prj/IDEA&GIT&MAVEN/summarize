名词解释
IDEA:
Java虚拟机的一个集成开发环境。
Capable and ergonomic IDE for JVM.
GIT:
免费和开源的分布式版本管理系统。
Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency.
MAVEN:
Maven是一个软件项目管理和理解的工具。
Apache Maven is a software project management and comprehension tool. Based on the concept of a project object model (POM), Maven can manage a project's build, reporting and documentation from a central piece of information.


事情的起因
事情已经起因很多次了
但都险些没有解决或者比较耽误事情
今天有发生了一起
maven的私服里某一个包不能用了
于是登陆上Nexus Repository Manager上查看历史版本
最后使用了Version=1.0-20191106.041655-108的包
随后引用就可以使用了，程序也正常
事情过了很多天
今天我准备把服务打成jar包放在服务器上去跑一些东西
maven一直报错说找不到那个包
再胡乱修改一通后还是不行
胡乱修改包括重启idea了、换换名字了、删除删除了
最后还是不行
准备去吧那个maven私服上的包的版本倒退回来
后来又重启了一次或者又更换了maven的版本什么的
神奇的就又能打包成jar了
工作得以继续了
但是花费了2个小时
并且也没有找到问题和解答方法

学习和记录
What's Maven
Introduction :-)
Maven, a [Yiddish word](https://en.wikipedia.org/wiki/Maven) meaning *accumulator of knowledge*, began as an attempt to simplify the build processes in the Jakarta Turbine project. There were several projects, each with their own Ant build files, that were all slightly different. JARs were checked into CVS. We wanted a standard way to build the projects, a clear definition of what the project consisted of, an easy way to publish project information and a way to share JARs across several projects.
The result is a tool that can now be used for building and managing any Java-based project. We hope that we have created something that will make the day-to-day work of Java developers easier and generally help with the comprehension of any Java-based project.
关键词
accumulator of knowledge
Ant
CVS
JARs
comprehension
理解
知识的积累，就像"不用重复造轮子"
Java代码可以包成Jar
为了分享Jars，Maven将项目之间的Jar串联起来
---------------------------------------------------
Maven’s Objectives
Making the build process easy
Providing a uniform build system
Providing quality project information
Providing guidelines for best practices development
Allowing transparent migration to new features
理解
创建项目过程的简单化
统一的创建系统
有质量的项目信息 不慎了解
开发最容易上手的指导规范 初步理解，不知道对不对
透明的迁移  更不了解
结论
以为自己看明白了前两个

Feature Summary
---------------------------------------------------
A large and growing repository of libraries and metadata to use out of the box, and arrangements in place with the largest Open Source projects for real-time availability of their latest releases

Extensible, with the ability to easily write plugins in Java or scripting languages

Model based builds: Maven is able to build any number of projects into predefined output types such as a JAR, WAR, or distribution based on metadata about the project, without the need to do any scripting in most cases

Coherent site of project information: Using the same metadata as for the build process, Maven is able to generate a web site or PDF including any documentation you care to add, and adds to that standard reports about the state of development of the project. Examples of this information can be seen at the bottom of the left-hand navigation of this site under the "Project Information" and "Project Reports" submenus

Release management and distribution publication: Without much additional configuration, Maven will integrate with your source control system (such as Subversion or Git) and manage the release of a project based on a certain tag. It can also publish this to a distribution location for use by other projects. Maven is able to publish individual outputs such as a JAR, an archive including other dependencies and documentation, or as a source distribution

Dependency management: Maven encourages the use of a central repository of JARs and other dependencies. Maven comes with a mechanism that your project's clients can use to download any JARs required for building your project from a central JAR repository much like Perl's CPAN. This allows users of Maven to reuse JARs across projects and encourages communication between projects to ensure that backward compatibility issues are dealt with.
关键词
large and growing repository
Extensible and plugins
a JAR, WAR, or distribution based on metadata
integrate with git
理解
一个大的开源的并且增长着的仓库，很多大型公司也在使用maven，比如google、alibaba
可以扩展的支持插件，比如spring boot的插件
基于模型的构建，这个好像很难理解，先记住了，后续再来体味它的用法
项目信息的连贯，不太知道，猜测类似是帮助文档，瞎猜的，感觉不慎重要
发行管理和分布式发布，无话
依赖管理
结论
挑选了一些自己没看懂的贴了出来，感觉能看懂的，大部分是在夸maven的方便使用。
自己感觉挑选的这些可能是有用的特性吧
还有其实刚开始看特性没什么太大的用处，只是混一个脸熟

-----------------------------------------------------------------------
Maven Users Centre->Installing Apache Maven
extracting the archive and adding the `bin` folder with the `mvn` command to the `PATH`.
结论
这种方法是通过网页下载版进行的，通常在服务器上使用的是安装服务的包，通常分为两个大的派系，yum和dpkg
这句话解释了安装的精髓，也就是把maven家目录里的bin目录添加到系统的PATH中
----------------------------------------------------------------------
Maven Users Centre->Running Apache Maven
讲诉了如何让maven项目跑起来
典型的命令：mvn package
最常最多使用的：mvn verify
插件形式：mvn archetype:generate
---------------------------------------------------------------------
Maven Users Centre->Configuring Apache Maven
介绍了maven的相关配置
setting.xml
.mvn
.mvn/extensions.xml
.mvn/maven.config
.mvn/jvm.config
---------------------------------------------------------------------
Maven Users Centre->Apache Maven IDE Integration
介绍了常用的IDE的关于maven的配置说明
---------------------------------------------------------------------
Providers of Apache Maven Support and Training
介绍了对maven的支持和培训相关的内容
没有支持maven的公司
有一些培训公司，还是蛮有趣，可以针对某一个小技术的培训，在国内好像没有
都是大面上的培训，针对某一个大型应用上的培训，比如达内、黑马等
----------------------------------------------------------------------
总结->About maven
到这里关于about maven看完了
主要介绍了什么是maven:为了分享Jars，Maven将项目之间的Jar串联起来
maven的特性:挺多的，现在知道有一个是可以用.md来写网页，归结于maven的某一个插件
如何下载maven:介绍的是网页版的下载方法，有图形界面的系统容易操作，好像除了服务器，开发机应该都是有图形界面的
基本的使用:下载、测试、运行、配置
历史版本:不再赘述
感觉最重要的是什么是maven，解释的水平还是挺高的，也就是为什么会存在以及存在的意义

第二章 DOCUMENTATION
Getting Started with Maven->Maven in 5 Minutes->Prerequisites
You must have an understanding of how to install software on your computer. If you do not know how to do this, please ask someone at your office, school, etc or pay someone to explain this to you. The Maven mailing lists are not the best place to ask for this advice.
把maven安装到你的电脑，使用你能想到的任何方法
Getting Started with Maven->Maven in 5 Minutes->Creating a Project
command
creating
mvn archetype:generate -DgroupId=com.mycompany.app -DartifactId=my-app -DarchetypeArtifactId=maven-archetype-quickstart -DarchetypeVersion=1.4 -DinteractiveMode=false
build
mvn package
test
java -cp target/my-app-1.0-SNAPSHOT.jar com.mycompany.app.App
总结
没有讲创建一个项目后那些参数都是些什么意思，就是想让你感受一下创建的过程吧
使用mvn package去构建这个项目，这一点就像gcc a.txt然后会生成一个a.out的可执行文件一样
测试就是使用相应的命令去执行后面那个可执行的命令java -cp的意思是从.jar文件里搜索某个class去执行
Getting Started with Maven->Maven in 5 Minutes->Running maven Tools
Maven Phases  :-)
validate: validate the project is correct and all necessary information is available
compile: compile the source code of the project
test: test the compiled source code using a suitable unit testing framework. These tests should not require the code be packaged or deployed
package: take the compiled code and package it in its distributable format, such as a JAR.
integration-test: process and deploy the package if necessary into an environment where integration tests can be run
verify: run any checks to verify the package is valid and meets quality criteria
install: install the package into the local repository, for use as a dependency in other projects locally
deploy: done in an integration or release environment, copies the final package to the remote repository for sharing with other developers and projects.
clean: cleans up artifacts created by prior builds
site: generates site documentation for this project
An interesting thing to note is that phases and goals may be executed in sequence
关键词
phases
validate:correct,necessary information is available
package:distributable format JAR
verify:run valid and quality
install:other projects locally
deploy:sharing with other developers and projects
总结
它将这几个命令叫做phases，中文翻译过来是阶段，这个词的来源应该是编译原理过来的，分成阶段来介绍这些命令是极好的
还有一点能感觉到这几个phases并不是最原始的，感觉是根据需求而挑拣出来的，阶段是对于这几个命令本身来说的，和他们之间没什么阶段的关系
我是这么理解的，不知道对不对
工作中，我用package和install都可以生成jar并且用java -jar去执行他们，达到我想要的，启动某个程序服务
还有一点，就是这些phases可以在一个序列中一起执行，也就是
mvn clean
mvn package
可以写成
mvn clean package

总结 Getting Started with Maven->Maven in 5 Minutes
We hope this quick overview has piqued your interest in the versatility of Maven. Note that this is a very truncated quick-start guide. Now you are ready for more comprehensive details concerning the actions you have just performed
这个Conclusion就写的很好


Getting Started with Maven->Getting Started in 30 Minutes
写在前面
上周2和4，每天都在看maven，发生了一些事情，也没什么好谈
还挺喜欢这种感觉，看看东西，记录记录，不用太在意格式什么的
只是记录
在万树园的时候没有看过
基本都是在公司的时候会去看
刚开读了一个开头，感觉maven的好多都在重复，可能是因为我读的太多了
不过认真看了一番，是不一样的

Getting Started with Maven->Getting Started in 30 Minutes->What is Maven?
Maven is essentially a project management and comprehension tool and as such provides a way to help with managing
Builds
Documentation
Reporting
Dependencies
SCMs
Releases
Distribution
理解
什么是maven和maven的概述，我感觉差异不太大，通常解释一个东西是什么，大部分人会从他能干什么来说。
这里说maven能干的是管理项目，并且提供一些理解的工具来帮助大家来管理
todo:Philosophy of Maven History of Maven https://maven.apache.org/background/philosophy-of-maven.html
https://maven.apache.org/background/history-of-maven.html

Getting Started with Maven->Getting Started in 30 Minutes->How can Maven benefit my development process?
理解
这里的感觉是在介绍他的特性
感觉比上面的更具有概念化，吹牛皮的感觉

Getting Started with Maven->Getting Started in 30 Minutes->How do I setup Maven?
理解
我对这个setup理解有点偏差，我认为是如何开始搞，或者一步一步怎么做
setup设置，step步子
就是告诉你关于maven的一些配置，为什么不是config这个词
无话

Getting Started with Maven->Getting Started in 30 Minutes->How do I make my first Maven project?
To create our first Maven project we are going to use Maven's archetype mechanism.
An archetype is defined as an original pattern or model from which all other things of the same kind are made.
In Maven, an archetype is a template of a project which is combined with some user input to produce a working Maven project that has been tailored to the user's requirements.
关键词
archetype mechanism
理解
第二句是简单介绍一下啥是原型
第三句是说了maven里的原型是啥
经验：这个词听过，很牛批的东西吧，事情的种类和步骤有很多种，而这个原型就是通过某种方法，把这些事情概述归一
然后你可以在这个原型的基础上删删减减，来达到目的，全是感觉，不一定是对的。
todo Introduction to Archetypes https://maven.apache.org/guides/introduction/introduction-to-archetypes.html
This is important to remember because Maven is inherently project-centric in that everything revolves around the notion of a project.
In short, the POM contains every important piece of information about your project and is essentially one-stop-shopping for finding anything related to your project.
POM很重要，因为maven是明目中心的，所有的事情都是围绕着项目展开的。
第二句没看懂。
modelVersion This element indicates what version of the object model this POM is using. The version of the model itself changes very infrequently but it is mandatory in order to ensure stability of use if and when the Maven developers deem it necessary to change the model.
POM的版本号码，说的是POM的版本，我只想知道这东西是不是必须的，或者不通版本的POM功能不通
就像PY2.X和PY3.X？
packaging This element indicates the package type to be used by this artifact (e.g. JAR, WAR, EAR, etc.). This not only means if the artifact produced is JAR, WAR, or EAR but can also indicate a specific lifecycle to use as part of the build process. (The lifecycle is a topic we will deal with further on in the guide. For now, just keep in mind that the indicated packaging of a project can play a part in customizing the build lifecycle.) The default value for the packaging element is JAR so you do not have to specify this for most projects.
对这个挺感兴趣的，打包的类型，也就是让代码跑起来的方式，JAR、WAR我看还有POM
其他的也看了，project是一个top级别的element，groupid跟DNS的命名有点相似，artifactid工程id，就是某个公司的某个项目，version、name、url、description不再赘述

Getting Started with Maven->Getting Started in 30 Minutes->How do I compile my application sources?
无话，这个是告诉你如何编译自己的项目，编译应该是将目标代码，转化为计算机可以识别的0和1，也就是二进制文件
还没忘。然后就是告诉你生成了target文件夹等等,不懂java，连如何执行一个.class都不会

Getting Started with Maven->Getting Started in 30 Minutes->How do I compile my test sources and run my unit tests?
这两个跟java语音本身应该结合的比较紧密，因为我不懂java，所以看的不太明白
只是记得，mvn test : maven downloads more dependencies; mvn compile :maven downloads related dependencies

Getting Started with Maven->Getting Started in 30 Minutes->How do I create a JAR and install it in my local repository?
如何创建一个jar并且下载到本地的仓库中，前一个问题，在《花5分钟开启maven》的时候已经介绍了
自己也知道了，所以这次主要看看how do install JAR in my local repository
主要看了如何下载到本地仓库，就是mvn install就可以了。

Getting Started with Maven->Getting Started in 30 Minutes->What is a SNAPSHOT version?
什么是一个SNAPSHOT版本
这里解释是开发版本或者是不受保证的稳定或不变的版本
早些的时候，在使用VM的虚拟机的时候，也有这个词，叫作SNAPSHOT
当时理解就ghost一键还原
现在感觉像是历史版本的意思，可以追溯到某个状态下，有点git的意思了吧

Getting Started with Maven->Getting Started in 30 Minutes->How do I use plugins?
我如何使用插件
使用POM配置来使用插件，就像在POM使用依赖一样。
todo 构造的生命周期:https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html
todo 插件的列表：https://maven.apache.org/plugins/
todo 配置插件的教程：https://maven.apache.org/guides/mini/guide-configuring-plugins.html

Getting Started with Maven->Getting Started in 30 Minutes->How do I add resources to my JAR?
如何将资源添加到我的JAR
通常写程序的时候，会将Data和Code分开，这个说法是不准确的，Code也是一种Data
在我写程序的时候会新建一个Data文件夹里面经常放着诸如.json、.xls、.txt或者没有后缀的文件
这个资源这个词用的感觉比Data更大，或者他两没什么可比性
其实resource就是除了code文件的那些文件吧，总之我是这么理解的
这里介绍其实在mvn的常规（conventions)，也就是在${basedir}/src/main/resources这个文件家里，然后mvn package的时候就添加到JAR了
done linux opt .jar, include vies edit update->发现vim可以搞定,已经搞定，已结束，今日份开心
刚才在看这个的时候，忽然想到mvn test，它test的到底是什么，后来百度了，我想它test的可能就是能不能编译以及运行啥的
发现是有相应的插件来完成这个test，可以指定相应参数什么的
这里遗留了一个问题，也就是项目本身的目录结构和jar文件里的目录结构的对应关系表述
虽然不重要，但这里没有说明

Getting Started with Maven->Getting Started in 30 Minutes->How do I filter resource files?
如何过滤资源文件
  <build>
    <resources>
      <resource>
        <directory>src/main/resources</directory>
        <filtering>true</filtering>
      </resource>
    </resources>
  </build>
这个倒是容易明白，但也会发问，这算是白名单吗？也就是directory可以写多个文件吗？
心情浮躁，没有捋明白，后续讲了属性.值得事情，没太看明白
后续再来读这一节，现在去把今天要做的工作做完

说一点工作上的事情
今天把工作搞定好
开始测试
测试的时候发现一个
相同的查询语句
在不同的数据上执行的速度也不同
不能算是错误
但极其缓慢
有趣的事情是
执行出来的那个数据量是多的
而执行特别缓慢的那个数据量却是少的
我想这个问题属于查询优化类的范畴了
如果细究的话，要研究数据的表现形式
以及查询语句的逻辑
其实这个问题我本来不用太去追
因为我只是负责把查询语句书写出来
并且给出某个case的结果就可以了
并不用给出所有case的结果
也不知道自己怎么了
鬼使神差的非要找出原因了
在这个事情上耗费了近两个小时的时间

我有一个猜测是这样的
查询导致了环的出现
所以陷入了死循环内
很早之前跟同事确认了一下
neo4j会自动跳出环的
但这次我还是猜测是因为环的问题

什么是环呢？
我们把关系画成图，环就是这些关系形成了闭路

比如，a喜欢b，b喜欢a，这就是一个环。
a喜欢b，b喜欢c，c喜欢a，这也是一个环。

刚才去做了测试
细细想想跟环路没有关系
因为cypher语句中节点直接的关系都是直接相关的
也就是没有跨越节点去查询

尝试了优化了查询语句
把多余的optional match删除了之后就查询出来了

这个差别还是挺大的，这可以算上是一个优化点
但还是会让他们把模板修改成少一点字段组合的group

资源文件会包含一些变量，在构建的时候，提供给程序。
在maven中是这样实现的，在资源文件中，使用引用的属性，语法是${<property name>}
这个属性可以是定义在你的pom.xml文件中、也可以在你的setting.xml文件中、也可以是外部的属性文件或者系统属性

用maven实现资源文件过滤，直接复制下面的pom配置，将filtering标签设置为true即可。

你会注意到我们添加了build、resources、resource元素，另外，我们不得不明确，resource文件在/src/main/resources目录中
我们提供的pom里的所有的这些信息都是默认值，filtering是false，我们不得不改成true

在你定义的pom中去引用一个属性，XML元素定义的名称就是属性的名称，pom的根元素project开始引用。
因此${project.name}就代表，Maven Quick Start Archetype，${project.build.finalName},这个没有读懂，实际操作了一下
这个名字是mvn package后jar的名字。

pom里的元素有默认值，因此不需要明确的定义你的pom.xml中的值，相似的在用户的settings.xml可以从settings开始引用，比如${settings.localRepository}，引用用户的本地仓库的路径。

继续我们的样例，让我们添加一堆属性到application.properties文件，当filtered是true的时候，这些值会被提供。
执行mvn process-resources,process-resources是一个build lifecycle phase，资源文件将被复制和过滤
tip:这时候发现过滤的不是某个目录，而是这些引用的值

引用外部文件中定义的属性，你要在pom.xml中添加外部文件。首先要做的是创建一个外部的属性文件
之后在pom.xml添加
<filters>
      <filter>src/main/filters/filter.properties</filter>
</filters>

接下来执行mvn process-resources命令，外部的属性文件将会添加到application.properties中。
你可以定义一个外部的文件，也可以直接在pom.xml中定义属性值,两者的作用一样。
<properties>
    <my.filter.value>hello</my.filter.value>
</properties>

过滤资源文件可以获得系统的属性，比如Java的，java.version,user.home等
或者属性定义在命令中的，使用标准的java -D 参数。
test_command=${nj}
java process-resources "-Dnj=hello world"

这一章算是读完了，也读的比较清楚了，其实主要过滤的并不是资源文件，过滤的是资源文件中的属性值
这个标题起的不太过关
这个application.properties的属性和值是供养给后续的程序使用的

Getting Started with Maven->Getting Started in 30 Minutes->How do I use external dependencies?
如何使用外部的依赖?
在我们之前使用过的示例里，你可能早就知道了dependencies这个部分(section)。
事实上你可以使用一个外部的引用在这个的时候，但是在这里，我们将会讨论一些细节。
可以参考，依赖机制的导论。https://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html

在构建的时候，我们项目需要的外部引用，都可以放在pom.xml的中dependencies这个部分中。现在，我们的项目中只有Junit这一个依赖。
对于每一个外部的依赖，你将会至少需要4个事情，groupId,artifactId,version,and scope。
前三者都指明了一件事情，就是项目构建时的依赖。
scope这个元素指明了在项目中如何使用依赖，他的值可以是compile,test,runtime。

关于依赖的这部分信息，当项目在构建的时候maven会去引用依赖。
maven去哪里找依赖呢？
maven会先去查看你的本地仓库去找到所有的依赖。
在之前的章节里，我们下载了我们的工程，到本地的仓库。
只要他被下载到本地仓库，其他的项目就可以通过下面简单的配置，来引用这个依赖了。
  <dependencies>
    ...
    <dependency>
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-app</artifactId>
      <version>1.0-SNAPSHOT</version>
      <scope>compile</scope>
    </dependency>
  </dependencies>

maven的依赖构建在什么地方？如何进入到我的本地仓库？
无论何时，一个项目去引用一个本地仓库的依赖都是不可用的，maven会从远程仓库下载到本地仓库。
当你第一次构建项目的时候，你可能会注意到maven会下载很多东西。
maven使用的默认远程仓库是：https://repo.maven.apache.org/maven2/.
你可以设置属于你的远程仓库（比如你公司的）去替换默认仓库或者设置为默认仓库。
更多关于仓库的可以参考https://maven.apache.org/guides/introduction/introduction-to-repositories.html仓库导论
让我们添加另一个引用到我们的项目。
我们在代码中添加一些日志，因此需要添加log4j依赖。
首先要知道log4j的groupId，artifactId和version。
在maven仓库中心（这应该是apache的一个服务器）有一个目录是/maven2/log4j/log4j
在哪里又要给文件叫做maven-metadata.xml。像下面这样。
在这个文件里，我们可以看见groupId和artifactId。可以看见很多不同的版本。
除了maven-metadata文件还可以看见以版本号命名的文件夹，里面有真实存在的文件.jar，还有pom文件，还有md5文件。
你可以验证你的库的版本。


Getting Started with Maven->Getting Started in 30 Minutes->How do I deploy my jar in my remote repository?
如何将我的jar部署在远程仓库里
将jars部署在外部的仓库里，你需要配置仓库的url在你的pom里并且配置认证信息在你的setting.xml文件里。
下面是一个使用scp认证的例子
大致讲了一下没有太详细，也没有部署的命令什么的，可能是不同的远程仓库部署命令不同？


Getting Started with Maven->Getting Started in 30 Minutes->How do I create documentation?
如何创建文档？
跳去maven文档系统，使用原型机制创建一个站，使用下面的语句
更多参见：https://maven.apache.org/guides/mini/guide-site.html
是创建了一个网站的时候，才会使用文档吗？

Getting Started with Maven->Getting Started in 30 Minutes->How do I build other types of projects?
如何构建其他类型的项目？
创建一个简单的web应用
    mvn archetype:generate \
        -DarchetypeGroupId=org.apache.maven.archetypes \
        -DarchetypeArtifactId=maven-archetype-webapp \
        -DgroupId=com.mycompany.app \
        -DartifactId=my-webapp

 使用mvn package会生成一个WAR文件，使用标准的语句可以去执行它

Getting Started with Maven->Getting Started in 30 Minutes->How do I build more than one project at once?
如何一次创建多个项目？
在创建项目的时候会有这个问题。在这个部分，我们将展示如何创建一个WAR，并且保护之前的JAR在一步之内
首先，我们需要添加父亲pom.xml文件在上面两个项目上，看起来像这样的。

我们需要一个引用在webapp的pom.xml中，也就是将父亲的pom的引用放在这里
最后添加<parent>元素，到两个子pom中
最后在父亲目录使用mvn verify

运行原理是？首先，parent POM被创建，有一个列表的pom被定义。
这会告诉maven去运行所有的嵌入的项目。

接着，我们告诉WAR需要my-app的JAR。这会做很少的一些事情：确保路径可用，确保JAR的构建一定在WAR之前，并且指明WARplugin包含JAR的library路径

你可以发现junit-4.11.jar是被引用的，但不是在WAR结束的时候。这个原因是<scope>test</scope>元素指明只在测试运行
并且那不包含web的应用在编译时期

最后的步骤是包含父亲的定义。
确保POM总是可以被定义，尽管项目分布在不同的仓库里



Introduction to the Build Lifecycle
构建生命周期是maven的中心概念
Introduction to the Build Lifecycle->A Build Lifecycle is Made Up of Phases
这些名字起的很妙。
软件的生命周期。
构建生命周期。
阶段。
这些名字都有双关的感觉，做到了见名知意。
随想：
软件具有生命周期
项目其实是指软件项目
学习C的时候有编译和连接以及执行
可见这里的构建生命周期参考了软件生命周期
阶段是一个命令参数
这个名字起的和参数本身是对应的
阶段可用的有：验证、编译、测试等等
Introduction to the Build Lifecycle->Usual Command Line Calls
常用命令
mvn verify
mvn clean deploy
将package放在远程仓库里
Introduction to the Build Lifecycle->A Build Phase is Made Up of Plugin Goals
构建阶段基于插件目标
Phase并不仅仅是默认的那几个
可以使用plugin去扩展实现特定的功能
在plugin中是基于目标的，如：spring-boot:run
其中spring-boot是plugin，run是goals
Introduction to the Build Lifecycle->Some Phases Are Not Usually Called From the Command Line
一些不经常使用的phase



