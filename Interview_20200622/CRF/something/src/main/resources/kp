20200713
1. maven中的parent标签

由上面这个标签，引出了两个存在于maven中的概念：聚合、继承
由自身经验来谈，继承相较与聚合是容易直接在闹钟有直观的映像
多数入门的面向对象编程的语言都会有说明继承：子类共享父类的方法和变量
聚合能想起来的是关于SQL中的聚合函数，最简单的理解就是分组统计，我想maven里的
聚合跟我能想到的SQL里的聚合应该是两码子事情

以下来自互联网的民间解释
继承：继承可以使得子POM可以获得 parent 中的各项配置，可以对子pom进行统一的配置和依赖管理
聚合：具有模块的项目被称为多模块或聚合项目。模块是此POM列出并作为一组执行的项目。通过一个pom打包的项目可以将它们列为模块来聚合成一组项目进行构建，这些模块名是这些项目的相对目录。
关系：不必为了聚合而继承同一个父POM，也不比为了继承父POM而设计成多模块

理解上面的解释
继承：与过往自己对继承的认识大致相似，变化了环境，比如，在Java里继承的是变量或者方法，在maven里继承的各个标签。
聚合：与SQL中的聚合函数区别很大，但分组却与聚合有点相似。maven里的聚合是一个动作，结合之前自己使用聚合的maven项目的经验来谈，
聚合就是把需要执行两边的mvn verify，变成在聚合层执行一边，凡是往没有了它来思考，就可以获得它存在的意义。上面的解释是准确的，但是不容易被我理解。

2. maven中的dependencyManagement
简单理解就是管理maven中包的版本号，这个通常在父pom中

pom导论：https://maven.apache.org/pom.html

过程记录：由于看不明白maven中的parent标签，百度了之后，发现了maven中继承和聚合的事情，我觉得算是知识点
后来又去看了dependencyManagement这个标签，没有概念性的东西，感觉像是功能性的标签，发现是可以统一管理版本号
后来又发现了那个parent本身的含义是，spring-boot项目依据maven特性而定制的pom配置，这一点还挺有趣


20200714
java.util.concurrent
java keyword synchronized
并发->同步->操作系统->进程->线程
我想还是先把基础概念搞得清晰点，不然最后也只是闷头驴
那就先来说说并发吧。
很早之前是的系统架构是这样的，一个时间段内，cpu负责处理一个程序。
cpu管理的东西有很多，比如内存、硬盘、等等。
假如一个程序有一个步骤是这样的，需要往硬盘里写个100G的数据
如果cpu只负责处理那一个程序，那cpu就得等着硬盘写完了100g的数据之后，再运行那个程序后面的事情。
所以有聪明的人就在想，cpu呀，内存呀，以及其它资源，这个时候是空闲的，着不就是一种浪费了
因此，我想并发这次就是这么出现的吧。
CPU的核心数和进程没什么直接联系，CPU的核心数越高代表能处理的数据量越大
操作系统：https://www.cnblogs.com/inception6-lxc/p/9073983.html

20200715
Lombok
大致看了一点，通过注解@，来简化一些代码的书写。
虽然没使用过，这个取巧感觉有点蹩脚。
某种程度上讲，看见这样的东西让我想起来python的魔法函数。


20200716
util.function.Consumer
java.lang.Runnable
java keyword synchronized
java.util.concurrent

Metrics
synchronized

Controller
util.function.Consumer
java.lang.Runnable

M和C是怎么通过Consumer和Runnable去关联后面的那些个请求SS、转模型等操作？

20200720
名词解释

util.function.Consumer
表示“接受一个参数输入且没有任何返回值的操作“。不同于其它的函数式接口，Consumer期望通过方法的实现来执行具体的操作
这东西的溯源是：接口

思考溯源:Consumer->函数式接口->接口->方法->类->抽象类
java的本质是：抽象类、接口、多态一堆吧




void accept(T t);
可实现方法，接受一个参数且没有返回值


java.lang.Runnable

synchronized
