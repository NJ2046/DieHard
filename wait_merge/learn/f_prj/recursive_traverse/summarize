遍历未知深度的复杂的dictionary

关键词
python、dictionary、recursion、yield

参考
https://stackoverflow.com/questions/12507206/how-to-completely-traverse-a-complex-dictionary-of-unknown-depth/12507453#12507453

积累
dictionary
python的数据结构的名字
content:key & value

C语言中的结构体
struct Books
{
   char  title[50];
   char  author[50];
   char  subject[100];
   int   book_id;
} book;
content:everything

JSON
JavaScript Object Notation
content:Obj & array

Mongodb-Document
BSON:二进制的JSON，基于JSON的扩展


学习
recursion
递归，自己调用自己
在一个dictionary中包含了dictionary又包含了list，list里又包含了dictionary。
碰见这样的dictionary如何遍历
现在看来，那样的数据结构的定义本身就具有递归性，用递归去遍历就再合适不过了。
def walk(data):
    if data is dict:
        for key, value in data.items():
            walk(value)
    elif data is list:
        for d in data:
            walk(d)
    else:
        print(leaf)
上面的代码会输出这个嵌套的list或者dict的每一个叶子的value

yield
参考：《FluentPython》.14章 可迭代的对象、迭代器和生成器
似曾相识，之前读过

可迭代对象
序列式可以迭代的是因为内部的iter函数
检查Sentence对象是否实现了__iter__方法，如果实现了就去调用它，获取一个迭代器
如果没有实现__iter__方法，但是实现了__getitem__方法，python会创建一个迭代器
如果尝试失败，python抛出typeerror异常

迭代器
python从可迭代对象中获取迭代器
序列是可迭代对象
iter函数用来构建一个迭代器
在实现上，迭代对象和迭代器的区别，迭代对象没有next()函数

生成器函数
生成器函数是为了得到一个迭代器，非典型的实现方式
这是python的处理方式

生成器表达式
语法糖，用()来搞yield的所带来的功能

标准库中的生成器函数
itertools模块，关于iter的一些常用库
这一块可以做成一个reference
避免重复代码
<fluent python> 14.9

yield from 与协程

可迭代的归约函数
all()
any()
这一块可以做成一个reference

深入分析iter函数
能传入一个参数，当作哨兵，碰见他就StopIteration


案例分析：在数据库转换工具中使用生成器
灵活性强
根据不同输入采用不同处理使得结果一直
我感觉最大的作用是流式


把生成器当成协程
什么是协程？咱也不知道

2020-05-07
yield有多种用法，fluent python里的14章也约略提到了其它的用法
但在这一章里yield的主要作用是当作生成器来使用
fluent python里讲的比较细致，我感觉是从演变过程来讲解的
比如先聊了可迭代对象，接着引出迭代器，或者叫迭代模型（原文里是这样称呼）
上述两者都约略提了他们的抽象基类
有一个问题是生成器和迭代器的关系是什么？知乎找了一张不错的图片，解释了他们的联系。
关于这一章，我的出的关键词是
生成器，流失，灵活
还有一个自己挺喜欢的点：import argparse

早上收到了任务需求就开始看了那个任务需求书
算是把上周看的关于可迭代对象，迭代器和生成器的一个回顾
我先把工作上的需求实现
后续再来分析那个函数本身

20200508
工作上需要，直觉需要，但并不一定
来fluent python中的 15 上下文管理和else块

15.1
粗略介绍了else在python中的作用
不仅可以和if结合使用还可以while，for结合使用
两种编程风格
EAFP:easier to ask for forgiveness than permission
LBYL:look before you leap
简单粗暴的理解
LBYL:你爱我吗，爱，哦，我也爱你
EAFP:我爱你，你也爱我，哦
知乎：
# LBYL
def print_file(filename):
    if os.access(filename, os.R_OK):                # permission check
        with open(filename) as fd:
            for line in fd:
                print(fd)
    else:
        logging.warn("cannot access %s", filename)

# EAFP
def print_file(filename):
    try:
        fd = open(filename)
    except OSError:
        logging.warn("cannot access %s", filename, exc_info=True)
    else:
        for line in fd:
            print(fd)

15.2 上下文和with
似懂非懂，但并不是自己想要的东西了。

15.3 reference contextlib

15.4 装饰器@contextmanager

总结
事前准备和事后清理

这跟我想象之中的上下文管理器是不一样的。
我现在遇到的问题
在一个循环之内取得上一次循环的值
for row in rows:
    row
    op before row
    op after row
我认为的上下文是指在当前情况下可以获得全局的状况

回想一下python这里的上下文
说成上下资源可能更好
让准备资源和结束资源以及可能出现的异常和代码功能分开来
如果真的是这样去解耦的话
的确挺好的

后续的杂谈里
说到子程序，也就是编码常常讲到的事情，减少重用
A、B、C；P、B、C
这样把B拿出来写成函数（方法）就是子程序
他把B比作饺子馅，用不同的饺子皮可以做相同饺子馅的饺子
如果把饺子皮拿出来呢？
这说的倒是真的很有启发性
听起来也更抽象，或者难懂，因为再谈的也是没有范围的事情

不过这个并没有实质性的帮到我解决手里的问题
但也是学习了新的知识

我去做这件事凭的是直觉
因为yield紧挨着这一章，并且yield有暂停的特性
让我觉得暂停一下是不是可以回溯到上一个值
但情况并不是这样
我现在不再期望协程会有这样的功能
我期望先把代码写完，功能实现
后续再来研究这些

有一点
两种编程风格
EAFP和LBYL
python这样去设计即是基于EAFP的

20200511
python中的对象
想着把那两个功能封装成两个类
去写类的时候
发现自己从来没有去看过python中关于类的东西
打开fluent python中
只有第八章是说了对象
但也并不是类
不知道这一章是不是自己想要看的东西
并不是想要看得东西

20200512
review这个文件夹里的内容

起初的问题是遍历一个未知深度的dictionary
这需要递归遍历，并且带出path
递归遍历容易理解，但带出path就不太容易理解了

overflow发现一段优美且实用的代码
为了读懂代码
重温了递归
python的基础知识：迭代器、上下文管理

代码部分是读懂了递归，但那个带出的path没明白

后来为了优化代码
准备将功能合并为class
后续去读了python的基本知识类的事情
但并没有得到想要的东西

进展：
学习了可迭代对象、迭代器和生成器；上下文管理
温习了递归
看懂了overflow上代码的递归部分


演绎带出path的部分
试图理解
finish






